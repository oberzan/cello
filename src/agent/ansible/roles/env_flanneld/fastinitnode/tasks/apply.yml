---
- name: Figuring out the server architecture
  shell: uname -m | sed 's|i686|386|' | sed 's|x86_64|amd64|'
  register: rawarch

- name: Setup variables
  set_fact:
    goroot: "/opt/go"
    gopath: "/opt/gopath"
    arch: "{{ rawarch.stdout}}"

- name: Ensure gopath exists
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
    owner: "{{ cluster.ssh_user }}"
  with_items:
    - "{{ goroot }}"
    - "{{ gopath }}"

- name: Install apt-transport-https if necessary.
  apt:
    name: apt-transport-https
    state: present
  when: ansible_os_family == 'Debian'
  with_items:
    - apt-transport-https
    - ca-certificates
    - curl

- name: Add Docker apt key.
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    state: present
  when: ansible_os_family == 'Debian'
  register: add_repository_key
  ignore_errors: true

- name: Add Docker repository.
  apt_repository:
    repo: "deb https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_distribution_release }} stable"
    state: present
    update_cache: yes
  when: ansible_os_family == 'Debian'

- name: Install apt-transport-https if necessary.
  apt:
    name: git
    state: latest

- name: Install packages
  apt:
    name: "{{ item }}"
  with_items:
    - ['docker-ce', 'python-dev', 'python-pip', 'libtool', 'libltdl-dev']
    - ['net-tools', 'netcat-openbsd', 'autoconf', 'automake']
    - ['libtool', 'make', 'g++', 'unzip', 'build-essential']

- name: Install pip and upgrade
  pip:
    name: "{{ item.name}}"
    extra_args: "{{ item.args | default('') }}"
  with_items:
    - { name: "pip", args: "--upgrade" }
    - { name: "behave" }
    - { name: "nose" }
    - { name: "docker-compose" }
    - { name: "protobuf" }
    - { name: "couchdb==1.0" }

- name: Grant the user docker permission
  user:
    name: "{{ cluster.ssh_user }}"
    append: yes
    groups: "docker,root"

- name: Retrive golang binary and unpackage it
  unarchive:
    src: "https://storage.googleapis.com/golang/go{{ cluster.go_ver }}.linux-{{ arch }}.tar.gz"
    dest: "/opt"
    remote_src: True

- name: Fix up the search domain
  lineinfile:
    path: /etc/resolvconf/resolv.conf.d/base
    state: present
    line: search {{ cluster.domain | default('fabric') }}

- name: Setup golang profile
  template:
    src: "{{ playbook_dir }}/../env_flanneld/fastinitnode/templates/goroot.j2"
    dest: "/etc/profile.d/goroot.sh"

- name: Place the certificate in the right place
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.target }}"
    owner: "{{ cluster.ssh_user }}"
    group: "{{ cluster.ssh_user }}"
    mode: 0400
  with_items:
    - { src: "{{ cluster.public_key_file }}", target: "{{ gopath }}/id_rsa.pub" }
    - { src: "{{ cluster.private_key_file }}", target: "{{ gopath }}/id_rsa" }
