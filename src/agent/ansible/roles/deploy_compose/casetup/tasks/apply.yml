---
- name: Figuring out the server architecture
  shell: uname -m
  register: rawarch

- name: Setup few variables
  set_fact:
    cas: "{{ [] }}"
    cals: "{{ [] }}"
    fabricworkdir: "/opt/gopath/{{ env }}/fabric"
    full_tag: "{{ rawarch.stdout + '-' + fabric.baseimage_tag }}"

- name: Create component list
  set_fact:
    cals: "{{ cals | default([]) + item.value.cas | default([]) }}"
  with_dict: "{{ fabric.network }}"

- name: Get ca container list
  set_fact:
    cas: |
      {{ cas + [{'org':item.split('.')[-1],
        'name':item }] }}
  with_items: "{{ fabric.network[inventory_hostname].cas | default([]) }}"

- name: Make sure that working directory is clean
  file:
    path: "{{ fabricworkdir }}/run/keyfiles"
    state: "{{ item }}"
  with_items:
    - "absent"
    - "directory"

# - name: Make sure that working directory is clean
#   file:
#     path: "{{ fabricworkdir }}/run/{{ item }}"
#     recurse: yes
#     state: "directory"
#   with_items:
#     - "keyfiles"
#     - "cas"

- name: Create compose files
  template:
    src: "{{ playbook_dir }}/../deploy_compose/casetup/templates/{{ item }}.j2"
    dest: "{{ fabricworkdir }}/run/{{ item }}.yml"
  with_items:
    - "rca-compose"
    - "ica-compose"
  when: cas | length 

- name: Create compose files
  template:
    src: "{{ playbook_dir }}/../deploy_compose/casetup/templates/ca-cli-compose.j2"
    dest: "{{ fabricworkdir }}/run/ca-cli-compose.yml"

- name: Start CAs and cli
  command: "docker-compose -p {{ env }}.{{ item }} -f {{ fabricworkdir }}/run/{{ item }}.yml up -d"
  with_items:
    - "rca-compose"
    - "ica-compose"
  when: cas | length

- name: Start CAs and cli
  command: "docker-compose -p {{ env }}.ca-cli-compose -f {{ fabricworkdir }}/run/ca-cli-compose.yml up -d"

- name: Create component list
  set_fact:
    uid: "{{ ansible_env.XDG_RUNTIME_DIR | regex_replace('^.*/') }}"

- name: Start CAs and cli
  command: docker exec ca-cli bash -c "
              useradd {{ fabric.ssh_user }} -u {{ uid }}"