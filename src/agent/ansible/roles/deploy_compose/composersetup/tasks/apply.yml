---
- name: Setup variables
  set_fact:
    fabricworkdir: "/opt/gopath/{{ env }}/fabric"
    peerls: "{{ [] }}"
    cals: "{{ [] }}"
    ordererls: "{{ [] }}"
    peers: "{{ [] }}"
    peerorgs: "{{ [] }}"


- name: Get peer container list
  set_fact:
    peers: |
      {{ peers + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1],
        'role':item.split('@')[0]}] }}
  with_items: "{{ fabric.network[hostvars[inventory_hostname].inter_name].peers | default([]) }}"

- name:
  set_fact:
    peerls: "{{ peerls | default([]) + item.value.peers | default([]) }}"
    cals: "{{ cals | default([]) + item.value.cas | default([]) }}"
    ordererls: "{{ ordererls | default([]) + item.value.orderers | default([]) }}"
  with_dict: "{{ fabric.network }}"

- name: Get all peer object list
  set_fact:
    allpeers: |
      {{ allpeers | default([]) + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1],
        'role':item.split('@')[0]}] }}
  with_items: "{{ peerls }}"

- name: Get all ca object list
  set_fact:
    allcas: |
      {{ allcas | default([]) + [{ 'org':item.split('.')[-1],
        'name':item }] }}
  with_items: "{{ cals }}"

- set_fact:
    allorderers: |
      {{ allorderers | default([]) + [{ 'org':item.split('.')[-1],
        'name':item }] }}
  with_items: "{{ ordererls }}"

- name: Get the peer org list
  set_fact:
    peerorgs: "{{ peers | map(attribute='org') | list  | unique | sort }}"


# - include: setup-RedHat.yml
#   when: ansible_os_family == 'RedHat'

# - name: Download nvm install.sh
#   get_url:
#     url: https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh
#     dest: "{{ fabricworkdir }}/run/composer/install.sh"
#     mode: 0744

- include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- name: Set node source
  shell: |
    curl https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
  args:
    warn: no

- pause:
    seconds: 20

- name: Set node source
  environment:
    NVM_DIR: /home/{{ fabric.ssh_user }}/.nvm
  shell: |
    . "$NVM_DIR/nvm.sh"
    . "$NVM_DIR/bash_completion"
    nvm install 8
    nvm use 8
  args:
    executable: /bin/bash
  no_log: true

- name: Create /run/composer directory
  file:
    path: "{{ fabricworkdir }}/run/composer"
    state: "directory"

# - name: Add repository
#   become: true
#   become_user: root
#   apt_repository:
#     repo: "{{ item }}"
#     state: present
#   with_items:
#     - ppa:git-core/ppa
    

# - name: Install the gpg key for nodejs LTS
#   become: yes
#   apt_key:
#     url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
#     state: present

# - name: Add nodejs repository
#   become: yes
#   apt_repository:
#     repo: deb https://deb.nodesource.com/setup_8.x nodejs
#     update_cache: yes
#     state: present




# - name: Download prereqs-ubuntu.sh
#   get_url:
#     url: https://hyperledger.github.io/composer/prereqs-ubuntu.sh
#     dest: "{{ fabricworkdir }}/run/composer/prereqs-ubuntu.sh"
#     mode: 0744

# - name: Install prereqs and remove prereqs-ubuntu.sh
#   shell: |
#     {{ fabricworkdir }}/run/composer/prereqs-ubuntu.sh
#     rm {{ fabricworkdir }}/run/composer/prereqs-ubuntu.sh



# - name: Install nvm and remove install.sh
#   shell: |
#     {{ fabricworkdir }}/run/composer/install.sh
#     rm {{ fabricworkdir }}/run/composer/install.sh
#     export NVM_DIR="${HOME}/.nvm"
#     [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
#     [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
#     nvm install --lts
#     nvm use --lts
#     nvm alias default 'lts/*'
   
#     echo $NVM_BIN
#   register: tmp
# # npm install npm@latest -g
# - set_fact:
#     npm_path: "{{ tmp.stdout_lines | last }}/npm"
    

# - name: Install latest npm package globally.
#   npm:
#     name: npm
#     version: latest
#     global: yes

# - command: npm install -g composer-cli@0.16.1
# - command: npm install -g generator-hyperledger-composer@0.16.1
# - command: npm install -g composer-rest-server@0.16.1
# - command: npm install -g composer-cli@0.16.1

# - command: ls $NVM_DIR
#   environment:
#     NVM_DIR: ~/.nvm/versions/node/v8.9.3/bin
#     PATH: ~/.nvm/versions/node/v8.9.3/bin:{{ ansible_env.PATH }}

# - pause:
#     seconds: 20

# - shell: |
#     source ~/.bash_profile
#     ln -s /home/{{ fabric.ssh_user }}/.nvm/versions/node/v8.9.3/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm
#   become: true

- name: Install composer npm packages globally.
  environment:
    NVM_DIR: /home/{{ fabric.ssh_user }}/.nvm
    PATH: /home/{{ fabric.ssh_user }}/.nvm/versions/node/v8.9.3/bin:{{ ansible_env.PATH }}
  shell: |
    npm install -g {{item}}@{{ fabric.composer_tag }}
  with_items:
    - composer-cli
    - generator-hyperledger-composer
    - composer-rest-server

#source /home/{{ fabric.ssh_user }}/.profile

# - name: Install composer npm packages globally.
#   environment:
#     NVM_DIR: ~/.nvm
#     PATH: ~/.nvm/versions/node/v8.9.3/bin:{{ ansible_env.PATH }}
#   npm:
#     name: "{{ item }}"
#     version: "{{ fabric.composer_tag }}"
#     global: yes
#   with_items:
#     - generator-hyperledger-composer

# - name: Install composer npm packages globally.
#   npm:
#     name: composer-rest-server
#     version: '0.16.1'
#     global: yes

- name: Install "yo" node.js package globally.
  environment:
    PATH: /home/{{ fabric.ssh_user }}/.nvm/versions/node/v8.9.3/bin:{{ ansible_env.PATH }}
  npm:
    name: yo
    version: '2.0.0'
    global: yes

- name: Template composer Org only connection profiles
  vars:
    ORG_ONLY: true
  template:
    src: "{{ playbook_dir }}/composersetup/templates/composer-connection.j2"
    dest: "{{ fabricworkdir }}/run/composer/connection-{{ item }}-only.json"
  with_items: "{{ peerorgs }}"

- name: Template composer Org connection profiles
  vars:
    ORG_ONLY: false
  template:
    src: "{{ playbook_dir }}/composersetup/templates/composer-connection.j2"
    dest: "{{ fabricworkdir }}/run/composer/connection-{{ item }}.json"
  with_items: "{{ peerorgs }}"
