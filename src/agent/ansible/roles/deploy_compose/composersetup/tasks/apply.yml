---
- name: Setup variables
  set_fact:
    fabricworkdir: "/opt/gopath/{{ env }}/fabric"
    peerls: "{{ [] }}"
    cals: "{{ [] }}"
    ordererls: "{{ [] }}"
    peers: "{{ [] }}"
    peerorgs: "{{ [] }}"
    adminkeys: "{{ {} }}"
    allpeers: "{{ [] }}"
    allcas: "{{ [] }}"
    allorderers: "{{ [] }}"

- name: Get peer container list
  set_fact:
    peers: |
      {{ peers + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1],
        'role':item.split('@')[0]}] }}
  with_items: "{{ fabric.network[hostvars[inventory_hostname].inter_name].peers | default([]) }}"

- name:
  set_fact:
    peerls: "{{ peerls | default([]) + item.value.peers | default([]) }}"
    cals: "{{ cals | default([]) + item.value.cas | default([]) }}"
    ordererls: "{{ ordererls | default([]) + item.value.orderers | default([]) }}"
  with_dict: "{{ fabric.network }}"

- name: Get all peer object list
  set_fact:
    allpeers: |
      {{ allpeers | default([]) + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1],
        'role':item.split('@')[0]}] }}
  with_items: "{{ peerls }}"

- name: Get all ca object list
  set_fact:
    allcas: |
      {{ allcas | default([]) + [{ 'org':item.split('.')[-1],
        'name':item }] }}
  with_items: "{{ cals }}"

- set_fact:
    allorderers: |
      {{ allorderers | default([]) + [{ 'org':item.split('.')[-1],
        'name':item }] }}
  with_items: "{{ ordererls }}"

- name: Get the peer org list
  set_fact:
    peerorgs: "{{ peers | map(attribute='org') | list  | unique | sort }}"

- name: Create run/composer directory
  file:
    path: "{{ fabricworkdir }}/run/composer"
    state: "directory"

- name: Download nvm install.sh
  get_url:
    url: https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh
    dest: "{{ fabricworkdir }}/run/composer/install.sh"
    mode: 0744

- include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- name: Set node source
  shell: |
    curl https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
  args:
    warn: no

- name: Install node
  environment:
    NVM_DIR: /home/{{ fabric.ssh_user }}/.nvm
  shell: |
    . "$NVM_DIR/nvm.sh"
    . "$NVM_DIR/bash_completion"
    nvm install 8.9.4
    nvm use 8.9.4
  args:
    executable: /bin/bash
  no_log: true

- name: Create /run/composer directory
  file:
    path: "{{ fabricworkdir }}/run/composer"
    state: "directory"    

- name: Install composer npm packages globally.
  environment:
    NVM_DIR: ~/.nvm
    PATH: ~/.nvm/versions/node/v8.9.4/bin:{{ ansible_env.PATH }}
  npm:
    name: "{{ item }}"
    version: "{{ fabric.composer_tag }}"
    global: yes
  with_items:
    - composer-cli
    - generator-hyperledger-composer
    - composer-rest-server

- name: Install "yo" node.js package globally.
  environment:
    PATH: /home/{{ fabric.ssh_user }}/.nvm/versions/node/v8.9.4/bin:{{ ansible_env.PATH }}
  npm:
    name: yo
    version: '2.0.1'
    global: yes

- name:
  template:
    src: "{{ playbook_dir }}/composersetup/templates/endorsement-policy.json"
    dest: "{{ fabricworkdir }}/run/composer/"

- name: Process admin key files
  find:
    paths: "{{ fabricworkdir }}/run/keyfiles/orgs/{{ item }}/admin/msp/keystore"
    patterns: "*_sk"
    recurse: yes
  with_items:
    - "{{ peerorgs }}"
  register: adminprocesskeys

- name: Setup admin private key values
  set_fact:
    adminkeys: |
      {{ adminkeys | combine( {item.item: item.files[0].path.split('/')[-1] } ) }}
  with_items: "{{ adminprocesskeys.results }}"
  no_log: True

- name: Template connection profiles
  vars:
    clientorg: "{{ item }}"
    keyfilesdir: "{{ fabricworkdir }}/run/keyfiles"
  template:
    src: "{{ playbook_dir }}/fabricsetup/templates/network-config.j2"
    dest: "{{ fabricworkdir }}/run/composer/connection-{{ item }}.yml"
  with_items: "{{ peerorgs }}"

- name: Composer create card
  shell: 
    composer card create 
      -p ./connection-{{ item }}.yml 
      -u PeerAdmin 
      -c ../keyfiles/orgs/{{ item }}/admin/msp/signcerts/cert.pem
      -k ../keyfiles/orgs/{{ item }}/admin/msp/keystore/{{ adminkeys[item] }}
      -r PeerAdmin
      -r ChannelAdmin
      -f PeerAdmin@{{ env }}-{{ item }}.card
  args:
    chdir: "{{ fabricworkdir }}/run/composer/"
  with_items: "{{ peerorgs }}"

- name: Composer card import
  vars:
    DEBUG: "composer:*"
  shell: 
    composer card import -f PeerAdmin@{{ env }}-{{ item }}.card -n PeerAdmin@{{ env }}-{{ item }}
  args:
    chdir: "{{ fabricworkdir }}/run/composer/"
  with_items: "{{ peerorgs }}"

################################

- name: Composer runtime install
  vars:
    DEBUG: "composer:*"
  shell: 
    composer runtime install -c PeerAdmin@{{ env }}-{{ item }} -n marbles-network
  args:
    chdir: "{{ fabricworkdir }}/run/composer/"
  with_items: "{{ peerorgs }}"

- name: Composer create identities
  vars:
    DEBUG: "composer:*"
  shell:
    composer identity request 
      -c PeerAdmin@{{ env }}-{{ item }}
      -u ca1.{{ item }}.admin -s adminpw 
      -d BNadmin-{{ item }}
  args:
    chdir: "{{ fabricworkdir }}/run/composer/"
  with_items: "{{ peerorgs }}"

- name: Copy marbles-network .bna folder
  copy:
    src: "{{ playbook_dir }}/composersetup/files/marbles-network.bna"
    dest: "{{ fabricworkdir }}/run/composer/"

- set_fact:
    create_cmd: "{{ create_cmd | 
                      default('composer network start --card PeerAdmin@' + env + '-' + peerorgs.0 + 
                                ' --archiveFile marbles-network.bna 
                                -o endorsementPolicyFile=endorsement-policy.json')
                        + ' --networkAdmin BNadmin-' + item + ' --networkAdminCertificateFile BNadmin-' + item + '/ca1.'+ item +'.admin-pub.pem' }}"
  with_items: "{{ peerorgs }}"

- name: Composer network start
  vars:
    DEBUG: "composer:*"
  shell: "{{ create_cmd }}"
  args:
    chdir: "{{ fabricworkdir }}/run/composer/"

- name: Composer create user cards
  vars:
    DEBUG: "composer:*"
    user: BNadmin-{{ item }}
  shell:
    composer card create 
      -p connection-{{ item }}.yml 
      -u {{ user }} 
      -n marbles-network 
      -c {{ user }}/ca1.{{ item }}.admin-pub.pem 
      -k {{ user }}/ca1.{{ item }}.admin-priv.pem
  args:
    chdir: "{{ fabricworkdir }}/run/composer/"
  with_items: "{{ peerorgs }}"

- name: Composer import user cards
  vars:
    DEBUG: "composer:*"
  shell:
    composer card import -f user-{{ item }}@marbles-network.card
  args:
    chdir: "{{ fabricworkdir }}/run/composer/"
  with_items: "{{ peerorgs }}"

