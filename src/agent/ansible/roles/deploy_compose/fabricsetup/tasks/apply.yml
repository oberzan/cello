---
- name: Setup and initialize variables
  set_fact:
    current_host: "{{ hostvars[inventory_hostname].inter_name }}"
    fabricworkdir: "/opt/gopath/{{ env }}/fabric"
    gopath: "/opt/gopath/{{ env }}"
    peers: "{{ [] }}"
    orderers: "{{ [] }}"
    cas: "{{ [] }}"
    cakeys: "{{ {} }}"
    adminkeys: "{{ {} }}"
    kafkas: "{{ [] }}"
    kafkanodes: ""
    zookeepers: "{{ [] }}"
    znodes: ""
    zkparam: ""
    index: 1
    zoo_ids: "{{ {} }}"
    kafka_ids: "{{ {} }}"
    zookeeperls: "{{ [] }}"
    kafkals: "{{ [] }}"
    peerls: "{{ [] }}"
    ordererls: "{{ [] }}"
    cals: "{{ [] }}"
    allcas: "{{ [] }}"
    allpeers: "{{ [] }}"
    allorderers: "{{ [] }}"
    clihost: ""
    filterstr: ""
    full_tag: "{{ rawarch.stdout + '-' + fabric.baseimage_tag }}"
    baseimagetag: "{{ rawarch.stdout + '-' + fabric.helper_tag }}"
  tags: "createchannel"

- set_fact:
    server: "{{ fabric.network[current_host].server | default([]) }}"
    keyfilesdir: "{{ fabricworkdir }}/run/keyfiles"

- name: Create component list
  set_fact:
    cals: "{{ cals + item.value.cas | default([]) }}"
    ordererls: "{{ ordererls + item.value.orderers | default([]) }}"
    peerls: "{{ peerls + item.value.peers | default([]) }}"
    zookeeperls: "{{ zookeeperls + item.value.zookeepers | default([]) }}"
    kafkals: "{{ kafkals + item.value.kafkas | default([]) }}"
  with_dict: "{{ fabric.network }}"
  tags: "createchannel"

- name: Sort component list
  set_fact:
    zookeeperls: "{{ zookeeperls | sort }}"
    kafkals: "{{ kafkals | sort }}"

- name: Generate zookeeper node list
  set_fact:
    znodes: "{{ znodes }} server.{{ index }}={{ item }}:2888:3888"
    zkparam: "{{ zkparam + item }}:2181 "
    zoo_ids: "{{ zoo_ids | combine({item: index}) }}"
    index: "{{ index | int + 1 }}"
  with_items: "{{ zookeeperls }}"

- name: Reset the index
  set_fact:
    index: 1

- name: Generate kafka broker ids
  set_fact:
    kafka_ids: "{{ kafka_ids | combine({item: index}) }}"
    index: "{{ index | int + 1 }}"
  with_items: "{{ kafkals }}"

- name: Get all peer object list
  set_fact:
    allpeers: |
      {{ allpeers + [{'org':item.split('@')[1].split('.')[-1],
        'hostname':item.split('@')[1].split('.')[0],
        'name':item.split('@')[1],
        'role':item.split('@')[0]}] }}
  with_items: "{{ peerls }}"
  tags: "createchannel"

- name: Get all ca object list
  set_fact:
    allcas: |
      {{ allcas + [{ 'org':item.split('.')[-1],
        'name':item }] }}
  with_items: "{{ cals }}"
  tags: "createchannel"

- name: Get all orderer object list
  set_fact:
    allorderers: |
      {{ allorderers + [{ 'org':item.split('.')[-1],
                          'name':item }] }}
  with_items: "{{ ordererls }}"
  tags: "createchannel"

- name: Get peer container list
  set_fact:
    peers: |
      {{ peers + [{'org':item.split('@')[1].split('.')[-1],
        'hostname':item.split('@')[1].split('.')[0],
        'name':item.split('@')[1],
        'role':item.split('@')[0]}] }}
  with_items: "{{ fabric.network[current_host].peers | default([]) }}"
  tags: "createchannel"

- name: Get ca container list
  set_fact:
    cas: |
      {{ cas + [{'org':item.split('.')[-1],
        'name':item }] }}
  with_items: "{{ fabric.network[current_host].cas | default([]) }}"

- name: Get orderer container list
  set_fact:
    orderers: |
      {{ orderers + [{'org':item.split('.')[-1],
        'name':item }] }}
  with_items: "{{ fabric.network[current_host].orderers | default([]) }}"

- name: Set zookeeper and kafka container list
  set_fact:
    zookeepers: "{{ fabric.network[current_host].zookeepers | default([]) }}"
    kafkas: "{{ fabric.network[current_host].kafkas | default([]) }}"

- name: Get the peer org list
  set_fact:
    peerorgs: "{{ peers | map(attribute='org') | list  | unique | sort }}"

- name: Get all peer orgs
  set_fact:
    orgmembers: "{{ peers | map(attribute='org') | list  | unique | sort | join(\".member' '\") | trim | replace(' ', ',') }}"

# - name: Pull certificates from the builder machine
#   command: >-
#     scp -i "/opt/gopath/id_rsa" -r -o "StrictHostKeyChecking no" "{{ fabric.
#     ssh_user }}@{{ hostvars[groups['builders'][0]].private_ip }}:{{ fabricworkdir }}/certs.tgz"
#     "{{ fabricworkdir }}/allcerts.tgz"



  #####

- name: Pull container images from the builder machine
  command: >-
    scp -i "/opt/gopath/id_rsa" -r -o "StrictHostKeyChecking no" "{{ fabric.
    ssh_user }}@{{ hostvars[groups['builders'][0]].private_ip }}:{{ fabricworkdir }}/images/fabricimages.tar"
    "{{ fabricworkdir }}/fabricimages.tar"
  when: fabric.baseimage_tag == '' and inventory_hostname not in groups['builders']

- name: Pull container version file from the build machine
  command: >-
    scp -i "/opt/gopath/id_rsa" -r -o "StrictHostKeyChecking no" "{{ fabric.
    ssh_user }}@{{ hostvars[groups['builders'][0]].private_ip }}:{{ fabricworkdir }}/images/VERSION"
    "{{ fabricworkdir }}/VERSION"
  when: fabric.baseimage_tag == ''

#- name: Load all the docker images created by build machine
#  shell: >-
#    docker load -i {{ fabricworkdir }}/fabricimages.tar
#  when: fabric.baseimage_tag == '' and inventory_hostname not in groups['builders']

- name: Find out the image tags
  slurp:
    src: "{{ fabricworkdir }}/VERSION"
  register: project_version
  when: fabric.baseimage_tag == ''

- name: Set image tag from the file
  set_fact:
    full_tag: "{{ arch + '-' + (project_version['content'] | b64decode) }}"
  when: fabric.baseimage_tag == ''
  

- name: Process admin key files
  find:
    paths: "{{ keyfilesdir }}/orgs/{{ item.org }}/admin/msp/keystore"
    patterns: "*_sk"
    recurse: yes
  with_items:
    - "{{ allcas }}"
  when: server | length > 1
  register: adminprocesskeys

- name: Setup admin private key values
  set_fact:
    adminkeys: |
      {{ adminkeys | combine( {item.item.org: item.files[0].path.split('/')[-1] } ) }}
  when: server | length > 1 and
        item.files | length > 0
  with_items: "{{ adminprocesskeys.results }}"
  no_log: True

- name:
  find:
    paths: "{{ keyfilesdir }}/orgs/{{ item.org }}/msp/intermediatecerts"
    patterns: "*.pem"
    file_type: "file"
  with_items: "{{ orderers + peers }}"
  register: processintercerts

- name:
  set_fact:
    intercerts: "{{ intercerts | default({}) | combine( {item.item.name: item.files | map(attribute='path') | list} ) }}"
  with_items: "{{ processintercerts.results }}"

- name: Copy start-orderer script
  copy:
    src: "{{ playbook_dir }}/fabricsetup/files/{{ item }}.sh"
    dest: "{{ fabricworkdir }}/run/scripts/"
    mode: u+rwx
  with_items:
    - start-orderer
    - start-peer

- name: Login to docker repo
  command: "docker login {{ fabric.repo.url }} -u {{ fabric.repo.username }} -p {{ fabric.repo.password }}"
  when: >
    fabric.baseimage_tag | length > 0 and
    fabric.repo.username | default("") | length > 0 and
    fabric.repo.password | default("") | length > 0

- name: Pull container images from the docker hub
  command: "docker pull {{ fabric.repo.url }}{{ item }}"
  when: fabric.baseimage_tag | length > 0
  with_items:
    - "fabric-tools:{{ full_tag }}"
    - "fabric-ccenv:{{ full_tag }}"
    - "fabric-kafka:{{ baseimagetag }}"
    - "fabric-zookeeper:{{ baseimagetag }}"
    - "fabric-ca-peer:{{ full_tag }}"
    - "fabric-ca-orderer:{{ full_tag }}"
    - "fabric-couchdb:{{ baseimagetag }}"
    - "fabric-baseimage:{{ baseimagetag }}"
    - "fabric-baseos:{{ baseimagetag }}"
    #- "node:8.9"
  tags: "pullimages"

- name: Create docker compose files
  template:
    src: "{{ playbook_dir }}/fabricsetup/templates/{{ item.name }}.j2"
    dest: "{{ fabricworkdir }}/run/{{ item.name }}.yml"
  when: item.flag | length > 0
  with_items:
    - { name: "zookeeper-compose", flag: "{{ zookeepers }}" }
    - { name: "kafka-compose", flag: "{{ kafkas }}" }
    - { name: "orderer-compose", flag: "{{ orderers }}" }
    - { name: "peer-compose", flag: "{{ peers }}" }
    - { name: "server-compose", flag: "{{ server }}" }
    - { name: "cli-compose", flag: "{{ 'cli' }}" }

- name: Start fabric components
  command: "docker-compose -p {{ env }}.{{ item.name }} -f {{ fabricworkdir }}/run/{{ item.name }}.yml up -d"
  when: item.flag | length > 0
  with_items:
    - { name: "zookeeper-compose", flag: "{{ zookeepers }}" }
  tags: "fabricup"

- pause:
    seconds: 10

- name: Start fabric components
  command: "docker-compose -p {{ env }}.{{ item.name }} -f {{ fabricworkdir }}/run/{{ item.name }}.yml up -d"
  when: item.flag | length > 0
  with_items:
    #- { name: "zookeeper-compose", flag: "{{ zookeepers }}" }
    - { name: "kafka-compose", flag: "{{ kafkas }}" }
    - { name: "orderer-compose", flag: "{{ orderers }}" }
    - { name: "peer-compose", flag: "{{ peers }}" }
    #- { name: "cli-compose", flag: "{{ [1] if inventory_hostname in groups['builders'] else [] }}" }
    - { name: "cli-compose", flag: "{{ [1] if inventory_hostname == 'fabric001' else [] }}" }
  tags: "fabricup"
#####################################################################
# - name: enroll CA admin
#   command: "docker exec {{ item.name }} fabric-ca-client enroll -u http://admin:adminpw@{{ item.name }}:7054"
#   with_items: "{{ cas }}"

# - name: Register TLSCA certificates
#   command: "docker exec {{ item.name }} fabric-ca-client register --caname {{ item.name }} --enrollment.profile tls --id.name {{ item.name }} --id.secret pw"
#   with_items: "{{ cas }}"

# - name: Generate CA's TLS certificate
#   command: "docker exec {{ item.name }} fabric-ca-client enroll -u http://{{ item.name }}:pw@localhost:7054 --enrollment.profile tls --csr.cn {{ item.name }} --csr.hosts {{ item.name }} --caname {{ item.name }}" 
#   with_items: "{{ cas }}"
# sed -i -e 's/FABRIC_CA_SERVER_TLS_ENABLED=false/FABRIC_CA_SERVER_TLS_ENABLED=true/g' {{ fabricworkdir }}/run/ca-compose.yml

#- meta: end_play



################
# ################
# - name: Locate a host to run peer channel create command
#   set_fact:
#     clihost: "{{ item }}"
#     clipeer: "{{ allpeers | random }}"
#     cliorderer: "{{ allorderers | random }}"
#   when: peers | length > 0 and clihost == ""
#   with_items: "{{ groups['allnodes'] }}"
# ###
# - name: Create directories
#   file:
#     path: "{{ fabricworkdir }}/run/{{ item }}"
#     state: "directory"
#     mode: 0775
#   when: clihost == inventory_hostname #TODO
#   with_items:
#     - configs
#     - keyfiles/chaincode

# - name: Copy Dockerfile-server file and app and configs directory to server hosts
#   synchronize:
#     src: "{{ playbook_dir }}/fabricsetup/files/{{ item }}"
#     dest: "{{ fabricworkdir }}/run"
#   with_items:
#     - app
#     - configs
#     - Dockerfile-server
#   no_log: True
#   when: server | length > 1

# - name: Template testAPI
#   vars:
#     CHANNEL_NAME: "{{ fabric.channel_name }}"
#   template:
#     src: "{{ playbook_dir }}/fabricsetup/templates/testAPI.sh.j2"
#     dest: "{{ fabricworkdir }}/run/app/testAPI.sh"
#   when: server | length > 1

# - name: Template config.js
#   template:
#     src: "{{ playbook_dir }}/fabricsetup/templates/config.js.j2"
#     dest: "{{ fabricworkdir }}/run/app/config.js"
#   when: server | length > 1

# - name: Template config.json
#   template:
#     src: "{{ playbook_dir }}/fabricsetup/templates/config.json.j2"
#     dest: "{{ fabricworkdir }}/run/configs/config.json"
#   when: server | length > 1  

# - name: Template network-config
#   vars:
#     keyfilesdir: /etc/hyperledger/keyfiles
#   template:
#     src: "{{ playbook_dir }}/fabricsetup/templates/network-config.j2"
#     dest: "{{ fabricworkdir }}/run/configs/network-config.yml"
#   when: server | length > 1

# - name: Template org configs
#   template:
#     src: "{{ playbook_dir }}/fabricsetup/templates/org-config.j2"
#     dest: "{{ fabricworkdir }}/run/configs/{{ item }}-config.yml"
#   when: server | length > 1
#   with_items: "{{ peerorgs }}"

# ###
# - name: Move chaincode to the server
#   copy:
#     src: "{{ playbook_dir }}/fabricsetup/templates/example_cc.go"
#     dest: "{{ fabricworkdir }}/run/keyfiles/chaincode/example_cc.go"
#     mode: "u=rw,g=rw"
#   when: clihost == inventory_hostname #TODO
# ###

# - name: Start the server container
#   become: true
#   docker_service:
#     project_src: "{{ fabricworkdir }}/run"
#     project_name: "{{ env }}.server-compose"
#     files: 
#       - server-compose.yml
#     state: present
#   when: server | length > 1

# - wait_for:
#     host: "{{ server }}"
#     port: 4000
#   when: server | length > 1

# - name: Run testAPI.sh
#   shell: 'docker exec {{ server }} bash -c "./testAPI.sh -l node"'
#   async: 150
#   poll: 0
#   when: server | length > 1
#######################
#######################

- set_fact:
    first_peer: "{{ allpeers | first }}"
    first_orderer: "{{ allorderers | first }}"
  tags: "createchannel"

- name: Create channel
  shell: 'docker exec {{ first_peer.name }} bash -c "
            export CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/peer/admin/msp;
            peer channel create -o {{ first_orderer.name }}:7050
                                -c {{ fabric.channel_name }}
                                -f /etc/hyperledger/keyfiles/{{ fabric.channel_name }}.tx 
                                --tls true 
                                --timeout 120
                                --cafile /etc/hyperledger/keyfiles/{{ first_orderer.org }}-ca-chain.pem "'
  when: first_peer in peers
  tags: "createchannel"

- name: Fetch channel genesis block
  shell: 'docker exec {{ item.name }} bash -c "
            export CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/peer/admin/msp;
            peer channel fetch config /etc/hyperledger/keyfiles/{{ fabric.channel_name }}.block
                -c {{ fabric.channel_name }}
                -o {{ first_orderer.name }}:7050 
                --tls 
                --cafile /etc/hyperledger/keyfiles/{{ first_orderer.org }}-ca-chain.pem"'
  with_items: "{{ peers }}"
  tags: "createchannel"

#- meta: end_play

- name: Join peers
  shell: 'docker exec {{ item.name }} bash -c "
            export CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/peer/admin/msp;
            peer channel join -b /etc/hyperledger/keyfiles/{{ fabric.channel_name }}.block"'
  with_items: "{{ peers }}"
  tags: "createchannel"

- name: Update the anchor peers
  shell: 'docker exec -it {{ item.name }} bash -c "
            export CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/peer/admin/msp;
            peer channel update -c ${{ fabric.channel_name }}
                                -f /etc/hyperledger/peer/anchor.tx 
                                -o {{ first_orderer.name }}:7050 
                                --tls 
                                --cafile /etc/hyperledger/keyfiles/{{ item.org }}-ca-chain.pem"'
                                #--clientauth"'
  with_items: "{{ anchor_peers | intersect(peers) }}"
  tags: "createchannel"