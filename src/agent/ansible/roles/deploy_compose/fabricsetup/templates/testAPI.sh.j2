
function main {
  sleep 3

  echo "POST request Enroll on Org1  ..."
  echo
  ORG1_TOKEN=$(curl -s -X POST \
    http://localhost:4000/users \
    -H "content-type: application/x-www-form-urlencoded" \
    -d 'username=Jim&orgName=org1')
  echo $ORG1_TOKEN
  ORG1_TOKEN=$(echo $ORG1_TOKEN | jq ".token" | sed "s/\"//g")
  echo
  echo "ORG1 token is $ORG1_TOKEN"
  echo
  echo
  echo "POST request Enroll on Org2 ..."
  echo
  ORG2_TOKEN=$(curl -s -X POST \
    http://localhost:4000/users \
    -H "content-type: application/x-www-form-urlencoded" \
    -d 'username=Barry&orgName=org2')
  echo $ORG2_TOKEN
  ORG2_TOKEN=$(echo $ORG2_TOKEN | jq ".token" | sed "s/\"//g")
  echo
  echo "ORG2 token is $ORG2_TOKEN"
  echo

  echo
  sleep 5

  echo "POST request Create channel  ..."
  echo
  curl -s -X POST \
    http://localhost:4000/channels \
    -H "authorization: Bearer $ORG1_TOKEN" \
    -H "content-type: application/json" \
    -d '{
    "channelName":"{{ CHANNEL_NAME }}",
    "channelConfig":"{{ CHANNEL_NAME }}.tx"
  }'
  if [ 0 -ne $? ]; then return; fi;

  echo
  echo
  sleep 5
  echo
  echo
  echo "POST request Join channel on org1"
  curl -s -X POST \
    http://localhost:4000/channels/{{ CHANNEL_NAME }}/peers \
    -H "authorization: Bearer $ORG1_TOKEN" \
    -H "content-type: application/json" \
    -d '{
    "peers": ["peer1.org1", "peer2.org1", "peer3.org1"]
  }'
  echo
  echo

  echo
  echo "POST request Join channel on org2"
  curl -s -X POST \
    http://localhost:4000/channels/{{ CHANNEL_NAME }}/peers \
    -H "authorization: Bearer $ORG2_TOKEN" \
    -H "content-type: application/json" \
    -d '{
    "peers": ["peer1.org2","peer2.org2","peer3.org2"]
  }'

  echo
  echo $GOPATH
  echo

  sleep 3
  {% for org in peerorgs %}
  echo "POST Install chaincode on {{ org }}"
  echo
  curl -s -X POST \
    http://localhost:4000/chaincodes \
    -H "authorization: Bearer ${{ org | upper }}_TOKEN" \
    -H "content-type: application/json" \
    -d '{
    "peers": [{% for peer in allpeers|selectattr("org", "equalto", org)|list %}"{{ peer.name }}"{% if not loop.last %},{% endif %}{% endfor %}],
    "chaincodeName":"example_cc",
    "chaincodeType": "golang",
    "chaincodeVersion": "v0"
  }'
  if [ 0 -ne $? ]; then return; fi;
  echo
  {% endfor %}

  sleep 3

  echo "POST instantiate chaincode on peer1 of Org1"
  echo
  curl -s -X POST \
    http://localhost:4000/channels/{{ CHANNEL_NAME }}/chaincodes \
    -H "authorization: Bearer $ORG1_TOKEN" \
    -H "content-type: application/json" \
    -d '{
    "chaincodeName":"example_cc",
    "chaincodeVersion":"v0",
    "chaincodeType": "golang",
    "args":["a","100","b","200"]
  }'
  echo

  echo "POST invoke chaincode on peers of Org1 and Org2"
  echo
  TRX_ID=$(curl -s -X POST \
    http://localhost:4000/channels/{{ CHANNEL_NAME }}/chaincodes/example_cc \
    -H "authorization: Bearer $ORG1_TOKEN" \
    -H "content-type: application/json" \
    -d '{
    "fcn":"move",
    "args":["a","b","10"]
  }')
  echo "Transacton ID is $TRX_ID"
  echo
  echo

  echo "GET query chaincode on peer1 of Org1"
  echo
  curl -s -X GET \
    "http://localhost:4000/channels/{{ CHANNEL_NAME }}/chaincodes/example_cc?peer=peer1.org1&fcn=query&args=%5B%22a%22%5D" \
    -H "authorization: Bearer $ORG1_TOKEN" \
    -H "content-type: application/json"
  echo
  echo

  echo "GET query Block by blockNumber"
  echo
  curl -s -X GET \
    "http://localhost:4000/channels/{{ CHANNEL_NAME }}/blocks/1?peer=peer1.org1" \
    -H "authorization: Bearer $ORG1_TOKEN" \
    -H "content-type: application/json"
  echo
  echo

  echo "GET query Transaction by TransactionID"
  echo
  curl -s -X GET http://localhost:4000/channels/{{ CHANNEL_NAME }}/transactions/$TRX_ID?peer=peer1.org1 \
    -H "authorization: Bearer $ORG1_TOKEN" \
    -H "content-type: application/json"
  echo

}

main



