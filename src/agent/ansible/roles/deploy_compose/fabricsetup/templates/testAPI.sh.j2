
function main {
  sleep 3

  set -e

  {% for org in peerorgs %}
  echo "POST request Enroll on {{ org }}  ..."
  echo
  {{ org|upper }}_TOKEN=$(curl -s -X POST \
    http://localhost:4000/users \
    -H "content-type: application/x-www-form-urlencoded" \
    -d 'username=Jim{{ loop.index }}&orgName={{ org }}')
  echo ${{ org|upper }}_TOKEN
  {{ org|upper }}_TOKEN=$(echo ${{ org|upper }}_TOKEN | jq ".token" | sed "s/\"//g")
  echo
  echo "{{ org|upper }} token is ${{ org|upper }}_TOKEN"
  echo
  {% endfor %}
  echo
  sleep 3

  {% set first_peer = allpeers | first %}
  echo "POST request Create channel  ..."
  echo
  curl -s -X POST \
    http://localhost:4000/channels \
    -H "authorization: Bearer ${{ first_peer.org|upper }}_TOKEN" \
    -H "content-type: application/json" \
    -d '{
    "channelName":"{{ CHANNEL_NAME }}",
    "channelConfig":"{{ CHANNEL_NAME }}.tx"
  }'
  if [ 0 -ne $? ]; then return; fi;

  echo
  sleep 3
  echo
  {% for org in peerorgs %}
  echo
  echo "POST request Join channel on {{ org }}"
  curl -s -X POST \
    http://localhost:4000/channels/{{ CHANNEL_NAME }}/peers \
    -H "authorization: Bearer ${{ org|upper }}_TOKEN" \
    -H "content-type: application/json" \
    -d '{
    "peers": ["{{ allpeers | selectattr('org', 'equalto', org) | join('", "', attribute="name") }}"]
  }'
  echo
  {% endfor %}

  sleep 3
  {% for org in peerorgs %}
  echo "POST Install chaincode on {{ org }}"
  echo
  curl -s -X POST \
    http://localhost:4000/chaincodes \
    -H "authorization: Bearer ${{ org | upper }}_TOKEN" \
    -H "content-type: application/json" \
    -d '{
    "peers": [{% for peer in allpeers|selectattr("org", "equalto", org)|list %}"{{ peer.name }}"{% if not loop.last %},{% endif %}{% endfor %}],
    "chaincodeName":"example_cc",
    "chaincodeType": "golang",
    "chaincodeVersion": "v0"
  }'
  if [ 0 -ne $? ]; then return; fi;
  echo
  {% endfor %}

  sleep 3

  echo "POST instantiate chaincode on {{ first_peer.hostname }} of {{ first_peer.org }}"
  echo
  curl -s -X POST \
    http://localhost:4000/channels/{{ CHANNEL_NAME }}/chaincodes \
    -H "authorization: Bearer ${{ first_peer.org|upper }}_TOKEN" \
    -H "content-type: application/json" \
    -d '{
    "chaincodeName":"example_cc",
    "chaincodeVersion":"v0",
    "chaincodeType": "golang",
    "args":["a","100","b","200"]
  }'
  echo

  echo "POST invoke chaincode on all peers" #TODO
  echo
  TRX_ID=$(curl -s -X POST \
    http://localhost:4000/channels/{{ CHANNEL_NAME }}/chaincodes/example_cc \
    -H "authorization: Bearer ${{ first_peer.org|upper }}_TOKEN" \
    -H "content-type: application/json" \
    -d '{
      "peers": ["peer1.org1","peer2.org1"],
      "fcn":"move",
      "args":["a","b","10"]
  }')
  echo "Transacton ID is $TRX_ID"
  echo

  echo "GET query chaincode on {{ first_peer.hostname }} of {{ first_peer.org }}"
  echo
  curl -s -X GET \
    "http://localhost:4000/channels/{{ CHANNEL_NAME }}/chaincodes/example_cc?peer={{ first_peer.hostname }}.{{ first_peer.org }}&fcn=query&args=%5B%22a%22%5D" \
    -H "authorization: Bearer ${{ first_peer.org|upper }}_TOKEN" \
    -H "content-type: application/json"
  echo

  echo "GET query Block by blockNumber"
  echo
  curl -s -X GET \
    "http://localhost:4000/channels/{{ CHANNEL_NAME }}/blocks/1?peer={{ first_peer.hostname }}.{{ first_peer.org }}" \
    -H "authorization: Bearer ${{ first_peer.org|upper }}_TOKEN" \
    -H "content-type: application/json"
  echo

  echo "GET query Transaction by TransactionID"
  echo
  curl -s -X GET http://localhost:4000/channels/{{ CHANNEL_NAME }}/transactions/$TRX_ID?peer={{ first_peer.hostname }}.{{ first_peer.org }} \
    -H "authorization: Bearer ${{ first_peer.org|upper }}_TOKEN" \
    -H "content-type: application/json"
  echo

}

main



