# https://github.com/yeasy/docker-compose-files/tree/master/hyperledger
# This compose file will start a Hyperledger Fabric 1.0 MVE, including
# * 1 ca
# * 1 orderer
# * 4 peers in 2 orgs
# * cli for testing

version: '3.2'

services:
  ca.example.com:
    image: "hyperledger/fabric-ca:${HLF_VERSION-1.0.0}"
    container_name: ${COMPOSE_PROJECT_NAME}_fabric-ca
    hostname: ca
  #  command: /go/src/github.com/hyperledger/fabric-ca/bin/ca server start -ca testdata/ec.pem -ca-key testdata/ec-key.pem -config testdata/testconfig.json
    ports:
      - ${CA_ORG1_ECAP_PORT}:7054
    command: fabric-ca-server start -b admin:adminpw

  orderer.example.com:  # There  can be multiple orderers
    image: "hyperledger/fabric-orderer:${HLF_VERSION-1.0.0}"
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}_orderer  # mongo does not allow dot in name
    hostname: orderer.example.com
    labels:
      - monitor=true
      - hyperledger=true
      - com.docker.swarm.reschedule-policy=["on-node-failure"]
    environment:
      - ORDERER_GENERAL_LOGLEVEL=DEBUG  # default: INFO
      - ORDERER_GENERAL_LOGFORMAT=%{color}[%{id:03x} %{time:01-02 15:04:05.00 MST}] [%{longpkg}] %{callpath} -> %{level:.4s}%{color:reset} %{message}
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 # default: 127.0.0.1
      - ORDERER_GENERAL_GENESISMETHOD=file # default: provisional
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP # default: DEFAULT
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_LEDGERTYPE=file
      #- ORDERER_GENERAL_LEDGERTYPE=json  # default: file
      - ORDERER_GENERAL_BATCHTIMEOUT=1s
      - ORDERER_GENERAL_MAXMESSAGECOUNT=10
      - ORDERER_GENERAL_MAXWINDOWSIZE=1000
      - ORDERER_GENERAL_LISTENPORT=7050
     #- ORDERER_RAMLEDGER_HISTORY_SIZE=100  #only useful when use ram ledger
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true # default: false
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    ports:
      - ${ORDERER_PORT}:7050
    volumes: # docker.sock is mapped as the default CORE_VM_ENDPOINT
      #- /var/run/docker.sock:/var/run/docker.sock
      - ${COMPOSE_PROJECT_PATH}/channel-artifacts/orderer.genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ${COMPOSE_PROJECT_PATH}/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp
      - ${COMPOSE_PROJECT_PATH}/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls
    #volumes:
    #    - /var/run/:/host/var/run/
    logging:
      driver: json-file
      options:
        max-size: 100m
    command: orderer start

  peer0.org1.example.com:
    image: "hyperledger/fabric-peer:${HLF_VERSION-1.0.0}"
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}_peer0-org1
    hostname: peer0.org1.example.com
    labels:
      - monitor=true
      - hyperledger=true
      - com.docker.swarm.reschedule-policy=["on-node-failure"]
    environment:
     #- CORE_PEER_ID=peer0
      - CORE_LOGGING_LEVEL=${CLUSTER_LOG_LEVEL} #critical, error, warning, notice, info, debug
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_PEER_NETWORKID=${PEER_NETWORKID}
     #- CORE_PEER_NETWORKID=dev
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false  # this node is the group leader, default to false
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_VM_ENDPOINT=${VM_ENDPOINT}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${VM_DOCKER_HOSTCONFIG_NETWORKMODE} # host, bridge, ipvlan, none
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    expose:
      - "7052"  # Peer CLI
    ports:
      - ${PEER0_ORG1_GRPC_PORT}:7051
      - ${PEER0_ORG1_EVENT_PORT}:7053
    volumes: # docker.sock is mapped as the default CORE_VM_ENDPOINT
      - /var/run/docker.sock:/var/run/docker.sock
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls
    #volumes:
    #    - /var/run/:/host/var/run/
    logging:
      driver: json-file
      options:
        max-size: 100m
    command: peer node start

  peer1.org1.example.com:
    image: "hyperledger/fabric-peer:${HLF_VERSION-1.0.0}"
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}_peer1-org1
    hostname: peer1.org1.example.com
    labels:
      - monitor=true
      - hyperledger=true
      - com.docker.swarm.reschedule-policy=["on-node-failure"]
    environment:
     #- CORE_PEER_ID=peer0
      - CORE_LOGGING_LEVEL=${CLUSTER_LOG_LEVEL} #critical, error, warning, notice, info, debug
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_PEER_NETWORKID=${PEER_NETWORKID}
     #- CORE_PEER_NETWORKID=dev
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false  # this node is the group leader, default to false
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_VM_ENDPOINT=${VM_ENDPOINT}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${VM_DOCKER_HOSTCONFIG_NETWORKMODE} # host, bridge, ipvlan, none
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org1.example.com:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    expose:
      - "7052"  # Peer CLI
    ports:
      - ${PEER1_ORG1_GRPC_PORT}:7051
      - ${PEER1_ORG1_EVENT_PORT}:7053
    volumes: # docker.sock is mapped as the default CORE_VM_ENDPOINT
      - /var/run/docker.sock:/var/run/docker.sock
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls
    #volumes:
    #    - /var/run/:/host/var/run/
    logging:
      driver: json-file
      options:
        max-size: 100m
    command: peer node start

  peer0.org2.example.com:
    image: "hyperledger/fabric-peer:${HLF_VERSION-1.0.0}"
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}_peer0-org2
    hostname: peer0.org2.example.com
    labels:
      - monitor=true
      - hyperledger=true
      - com.docker.swarm.reschedule-policy=["on-node-failure"]
    environment:
     #- CORE_PEER_ID=peer0
      - CORE_LOGGING_LEVEL=${CLUSTER_LOG_LEVEL} #critical, error, warning, notice, info, debug
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_PEER_NETWORKID=${PEER_NETWORKID}
     #- CORE_PEER_NETWORKID=dev
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false  # this node is the group leader, default to false
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_VM_ENDPOINT=${VM_ENDPOINT}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${VM_DOCKER_HOSTCONFIG_NETWORKMODE} # host, bridge, ipvlan, none
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org2.example.com:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
    expose:
      - "7052"  # Peer CLI
    ports:
      - ${PEER0_ORG2_GRPC_PORT}:7051
      - ${PEER0_ORG2_EVENT_PORT}:7053
    volumes: # docker.sock is mapped as the default CORE_VM_ENDPOINT
      - /var/run/docker.sock:/var/run/docker.sock
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls
    #volumes:
    #    - /var/run/:/host/var/run/
    logging:
      driver: json-file
      options:
        max-size: 100m
    command: peer node start

  peer1.org2.example.com:
    image: "hyperledger/fabric-peer:${HLF_VERSION-1.0.0}"
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}_peer1-org2
    hostname: peer1.org2.example.com
    labels:
      - monitor=true
      - hyperledger=true
      - com.docker.swarm.reschedule-policy=["on-node-failure"]
    environment:
     #- CORE_PEER_ID=peer0
      - CORE_LOGGING_LEVEL=${CLUSTER_LOG_LEVEL} #critical, error, warning, notice, info, debug
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_PEER_NETWORKID=${PEER_NETWORKID}
     #- CORE_PEER_NETWORKID=dev
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false  # this node is the group leader, default to false
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_VM_ENDPOINT=${VM_ENDPOINT}
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${VM_DOCKER_HOSTCONFIG_NETWORKMODE} # host, bridge, ipvlan, none
      - CORE_PEER_ID=peer1.org2.example.com
      - CORE_PEER_ADDRESS=peer1.org2.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org2.example.com:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org2.example.com:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
    expose:
      - "7052"  # Peer CLI
    ports:
      - ${PEER1_ORG2_GRPC_PORT}:7051
      - ${PEER1_ORG2_EVENT_PORT}:7053
    volumes: # docker.sock is mapped as the default CORE_VM_ENDPOINT
      - /var/run/docker.sock:/var/run/docker.sock
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/fabric/tls
    #volumes:
    #    - /var/run/:/host/var/run/
    logging:
      driver: json-file
      options:
        max-size: 100m
    command: peer node start

  cli:
    container_name: ${COMPOSE_PROJECT_NAME}_fabric-cli
    hostname: fabric-cli
    image: "hyperledger/fabric-tools:${HLF_VERSION-1.0.0}"
    tty: true
    environment:
      - CORE_PEER_ID=fabric-cli
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051 # default to operate on peer0.org1
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true  # to disable TLS, change to false
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    volumes:
      - ${COMPOSE_PROJECT_PATH}/chaincode:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode
      - ${COMPOSE_PROJECT_PATH}/crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
      - ${COMPOSE_PROJECT_PATH}/scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
      - ${COMPOSE_PROJECT_PATH}/channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
    links:
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: bash -c 'sleep 2; bash ./scripts/initialize.sh; while true; do sleep 20170504; done'


  explorer:
    image: yeasy/blockchain-explorer:latest
    container_name: ${COMPOSE_PROJECT_NAME}_explorer
    hostname: explorer
    volumes:
      - ${COMPOSE_PROJECT_PATH}/explorer-artifacts/config.json:/blockchain-explorer/config.json
      - ${COMPOSE_PROJECT_PATH}/crypto-config:/blockchain-explorer/first-network/crypto-config
    ports:
      - "${DASHBOARD_PORT}:8080"
    depends_on:
      - mysql
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
    links:
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
    command: bash -c 'sleep 10; node main.js'

  mysql: # mysql service
    image: mysql:5.7
    container_name: ${COMPOSE_PROJECT_NAME}_mysql
    hostname: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=fabricexplorer
      - STARTUP_SQL=/fabricexplorer.sql
    volumes:
      - ${COMPOSE_PROJECT_PATH}/explorer-artifacts/fabricexplorer.sql:/docker-entrypoint-initdb.d/fabricexplorer.sql
    expose:
      - "3306"
    command: mysqld



networks:
  default:
    external:
      name: ${CLUSTER_NETWORK}
